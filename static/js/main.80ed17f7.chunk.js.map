{"version":3,"sources":["styles/theme.js","helpers/comicBook.js","styles/global.js","components/Upload/index.js","components/Upload/Upload.jsx","components/Viewer/Viewer.styles.js","components/Viewer/index.js","components/Viewer/Viewer.jsx","components/Loading/Loading.styles.js","components/Loading/index.js","components/Loading/Loading.jsx","components/Error/index.js","components/Error/Error.jsx","components/App/index.js","components/App/App.jsx","i18n.js","translations/en.js","translations/es.js","serviceWorker.js","index.js"],"names":["theme","colors","primary","secondary","alternative","background","font","fontSizes","small","medium","large","GlobalStyle","createGlobalStyle","Theme","children","readFile","file","Promise","resolve","reject","window","loadArchiveFormats","archiveOpenFile","archive","err","getImages","a","entries","filter","name","endsWith","getImage","image","readData","data","file_name","blob","Blob","type","toLowerCase","url","URL","createObjectURL","Wrapper","styled","div","props","Upload","withTheme","t","useTranslation","getRootProps","className","getInputProps","isDragActive","Page","img","Options","Viewer","useState","actualPage","setPage","src","onClick","newPage","loadImage","prevPage","totalPages","nextPage","Spinner","svg","Loading","viewBox","cx","cy","r","fill","strokeWidth","Error","App","comic","setComic","setImage","setError","loading","setLoading","onDrop","useCallback","acceptedFiles","comicBookHandler","then","images","catch","useDropzone","index","useEffect","length","i18n","use","LanguageDetector","initReactI18next","init","resources","en","translations","es","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.80ed17f7.chunk.js","sourcesContent":["import React from 'react'\nimport {\n    ThemeProvider,\n    createGlobalStyle\n} from \"styled-components\"\n\nconst theme = {\n    colors: {\n        primary: \"#222831\",\n        secondary: \"#00b8a9\",\n        alternative: \"#f6416c\",\n        background: \"#ffde7d\"\n    },\n    font: \"Fira Sans\",\n    fontSizes: {\n        small: \"1em\",\n        medium: \"2em\",\n        large: \"3em\"\n    }\n}\n\nconst GlobalStyle = createGlobalStyle`\n    body {\n        margin: 0;\n        background: ${theme.colors.background};\n    }\n`\n\nconst Theme = ({ children }) => (\n    <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        {children}\n    </ThemeProvider>\n)\n\nexport default Theme","const readFile = (file) => {\n    return new Promise((resolve, reject) => {\n        window.loadArchiveFormats(['rar', 'zip', 'tar'], function () {\n            window.archiveOpenFile(file, '', function (archive, err) {\n                if (err) reject(err)\n                resolve(archive)\n            })\n        })\n    })\n}\n\nconst getImages = async function (archive) {\n    return await archive.entries.filter((file) => {\n        if (file.name.endsWith('jpg') || file.name.endsWith('jpeg') || file.name.endsWith('png')) {\n            return file\n        }\n    })\n}\n\nconst getFileMimeType = function (file_name) {\n    file_name = file_name.toLowerCase();\n    if (file_name.endsWith('.jpeg') || file_name.endsWith('.jpg')) {\n        return 'image/jpeg';\n    } else if (file_name.endsWith('.png')) {\n        return 'image/png';\n    } else if (file_name.endsWith('.bmp')) {\n        return 'image/bmp';\n    } else if (file_name.endsWith('.webp')) {\n        return 'image/webp';\n    } else if (file_name.endsWith('.gif')) {\n        return 'image/gif';\n    } else {\n        return 'image/jpeg';\n    }\n}\n\nconst getImage = (image) => {\n    return new Promise((resolve, reject) => {\n        image.readData((data, err) => {\n            if (err) reject(err)\n\n            let blob = new Blob([data], {\n                type: getFileMimeType(image.name)\n            })\n            let url = URL.createObjectURL(blob)\n            resolve(url)\n        })\n    })\n}\n\n\nexport default {\n    readFile,\n    getImages,\n    getImage\n}","import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n    text-align: center;\n    height: 100vh;\n    display: flex;\n    -webkit-box-align: center;\n    align-items: center;\n    -webkit-box-pack: center;\n    justify-content: center;\n    flex-direction: column;\n    padding: 0px 40px;\n    color: ${props => props.theme.colors.alternative};\n    font-weight: 700;\n    font-family: '${props => props.theme.font}';\n    font-size: ${props => props.theme.fontSizes.medium};\n\n    i {\n        font-size: ${props => props.theme.fontSizes.large};\n    }\n\n    p {\n        margin-bottom: 0;\n    }\n\n    .description {\n        margin: 0;\n        font-size: 0.7em;\n    }\n`","import Upload from './Upload';\n\nexport default Upload;\n","import React from 'react'\nimport { withTheme } from 'styled-components'\nimport { Wrapper } from '../../styles/global'\nimport { useTranslation } from 'react-i18next'\n\nconst Upload = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper {...props.getRootProps()}>\n      <i className='bx bx-upload'></i>\n      <input {...props.getInputProps()} />\n      {\n        props.isDragActive ?\n          <p className=\"text\" >{t(`Drop the files here ...`)}</p> :\n          <p className=\"text\">{t(`Drag 'n' drop some files here, or click to select files`)}</p>\n      }\n      <p className=\"description\">{t('(We only accept .rar, .zip, .cbr and .cbz)')}</p>\n    </Wrapper>\n  )\n}\n\nexport default withTheme(Upload)\n","import styled from 'styled-components';\n\nexport const Page = styled.img`\n    width: 100%;\n`\n\nexport const Options = styled.div`\n    position: fixed;\n    bottom: 0;\n    background: #eee;\n    width: 100%;\n    padding: 10px 0;\n    text-align: center;\n    box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 4px -1px, rgba(0, 0, 0, 0.14) 0px 4px 5px 0px, rgba(0, 0, 0, 0.12) 0px 1px 10px 0px;\n\n    button {\n        border: none;\n\n        &:focus {\n            outline: none;\n        }\n\n        i {\n            font-size: 2em;\n        }\n    }\n\n    p {\n        margin: 0;\n        display: inline-block;\n        vertical-align: super;\n    }\n`","import Viewer from './Viewer';\n\nexport default Viewer;\n","import React, { useState } from 'react'\nimport { withTheme } from 'styled-components'\nimport { Page, Options } from './Viewer.styles'\n\nconst Viewer = (props) => {\n  const [actualPage, setPage] = useState(0)\n\n  const nextPage = () => {\n    if (actualPage !== props.totalPages) {\n      let newPage = actualPage + 1\n      setPage(newPage)\n      props.loadImage(newPage)\n    }\n  }\n\n  const prevPage = () => {\n    if (actualPage !== 0) {\n      let newPage = actualPage - 1\n      setPage(newPage)\n      props.loadImage(newPage)\n    }\n  }\n\n  return (\n    <>\n      <Page src={props.image} />\n      <Options>\n        <button onClick={() => prevPage()}><i className='bx bxs-chevron-left' ></i></button>\n        <p>{actualPage}/{props.totalPages}</p>\n        <button onClick={() => nextPage()}><i className='bx bxs-chevron-right' ></i></button>\n      </Options>\n    </>\n  )\n}\n\nexport default withTheme(Viewer)\n","import styled from 'styled-components'\n\nexport const Spinner = styled.svg `\n    animation: rotate 2s linear infinite;\n    z-index: 2;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin: -25px 0 0 -25px;\n    width: 50px;\n    height: 50px;\n\n    & .path {\n        stroke: ${props => props.theme.colors.alternative};\n        stroke-linecap: round;\n        animation: dash 1.5s ease-in-out infinite;\n      }\n\n      @keyframes rotate {\n        100% {\n          transform: rotate(360deg);\n        }\n      }\n      \n      @keyframes dash {\n        0% {\n          stroke-dasharray: 1, 150;\n          stroke-dashoffset: 0;\n        }\n        50% {\n          stroke-dasharray: 90, 150;\n          stroke-dashoffset: -35;\n        }\n        100% {\n          stroke-dasharray: 90, 150;\n          stroke-dashoffset: -124;\n        }\n      }\n`","import Loading from './Loading';\n\nexport default Loading;\n","import React from 'react'\nimport { withTheme } from 'styled-components'\nimport { Spinner } from './Loading.styles'\n\nconst Loading = (props) => (\n  <Spinner className=\"spinner\" viewBox=\"0 0 50 50\">\n    <circle className=\"path\" cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" strokeWidth=\"5\"></circle>\n  </Spinner>\n)\n\nexport default withTheme(Loading)\n","import Error from './Error';\n\nexport default Error;\n","import React from 'react'\nimport { withTheme } from 'styled-components'\nimport { useTranslation } from 'react-i18next'\nimport { Wrapper } from '../../styles/global'\n\nconst Error = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <i className='bx bx-error'></i>\n      <p>{t('Some error happens')}</p>\n      <p className=\"description\">{t('Maybe the file type is not supported (We only accept .rar, .zip, .cbr and .cbz)')}</p>\n    </Wrapper>\n  )\n}\n\nexport default withTheme(Error)\n","import App from './App';\n\nexport default App;\n","import React, { useState, useCallback, useEffect} from 'react'\nimport comicBookHandler from '../../helpers/comicBook'\nimport { useDropzone } from 'react-dropzone'\n\nimport Upload from '../Upload'\nimport Viewer from '../Viewer'\nimport Loading from '../Loading'\nimport Error from '../Error'\n\nconst App = (props) => {\n  const [comic, setComic] = useState()\n  const [image, setImage] = useState()\n  const [err, setError] = useState()\n  const [loading, setLoading] = useState(false)\n\n  const onDrop = useCallback(acceptedFiles => {\n    setLoading(true)\n\n    comicBookHandler.readFile(acceptedFiles[0])\n    .then((comic) => {\n      comicBookHandler.getImages(comic)\n      .then((images) => {\n        setComic(images)\n        setLoading(false)\n      })\n    })\n    .catch(setError)\n  }, [])\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n  const loadImage = (index) => {\n    setLoading(true)\n\n    comicBookHandler.getImage(comic[index])\n    .then((image) => {\n      setImage(image)\n      setLoading(false)\n    })\n  }\n\n  useEffect(() => {\n    if (comic) loadImage(0)\n  }, [comic])\n\n  if (err) return <Error/>\n\n  return (\n    <>\n    \n    { loading && <Loading/>}\n\n    { comic\n    ? <Viewer image={image} totalPages={comic.length} loadImage={loadImage}/>\n    : <Upload getRootProps={getRootProps} getInputProps={getInputProps} isDragActive={isDragActive}/>\n    }\n\n    </>\n  )\n}\n\nexport default App\n","import i18n from \"i18next\"\nimport LanguageDetector from \"i18next-browser-languagedetector\"\nimport { initReactI18next } from \"react-i18next\"\n\nimport en from './translations/en'\nimport es from './translations/es'\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    // we init with resources\n    resources: {\n      en: en,\n      es: es\n    },\n    fallbackLng: \"en\",\n    debug: false,\n\n    // have a common namespace used around the full app\n    ns: [\"translations\"],\n    defaultNS: \"translations\",\n\n    keySeparator: false, // we use content as keys\n\n    interpolation: {\n      escapeValue: false\n    }\n  });\n\nexport default i18n;\n","export default {\n    translations: {\n        \"Drag 'n' drop some files here, or click to select files\": \"Drag 'n' drop some files here, or click to select files\",\n        \"Drop the files here ...\": \"Drop the files here ...\",\n        \"(We only accept .rar, .zip, .cbr and .cbz)\": \"(We only accept .rar, .zip, .cbr and .cbz)\",\n        \"Maybe the file type is not supported (We only accept .rar, .zip, .cbr and .cbz)\": \"Maybe the file type is not supported (We only accept .rar, .zip, .cbr and .cbz)\"\n    }\n}","export default {\n    translations: {\n        \"Drag 'n' drop some files here, or click to select files\": \"Arrastra algún comic aquí o haz click para seleccionar el archivo\",\n        \"Drop the files here ...\": \"Suelta el archivo aquí ...\",\n        \"(We only accept .rar, .zip, .cbr and .cbz)\": \"(Solo aceptamos archivos: .rar, .zip, .cbr and .cbz)\",\n        \"Maybe the file type is not supported (We only accept .rar, .zip, .cbr and .cbz)\": \"Quizás este tipo de archivo no es soportado (Solo aceptamos archivos .rar, .zip, .cbr and .cbz)\"\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Theme from './styles/theme'\nimport App from './components/App'\nimport './i18n'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Theme>\n        <App />\n      </Theme>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}